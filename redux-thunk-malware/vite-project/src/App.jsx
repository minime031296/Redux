import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import './App.css';
import Coffeebeans from './Component/Coffeebeans';
import { applyMiddleware, legacy_createStore } from 'redux';
import axios from 'axios';
import {thunk} from 'redux-thunk';
import {logger} from 'redux-logger';


const API_REQUEST = "API_REQUEST";
const API_FAILURE = "API_FAILURE";
const API_SUCCESS = "API_SUCCESS";
const API_TOTALPAGE = "API_TOTALPAGE";

const initialState = {
  isLoading: false,
  isError: false,
  coffeeData: [],
  page: 1, 
  totalPages: 1 
};

const setLoading = (isLoading) => ({
  type: API_REQUEST,
  payload: isLoading
});

const setError = (isError) => ({
  type: API_FAILURE,
  payload: isError
});

const setCoffeeData = (coffeeData) => ({
  type: API_SUCCESS,
  payload: coffeeData
});

const setPages = (page, totalPages) => ({
  type: API_TOTALPAGE,
  payload: { page, totalPages }
});

const coffeeReducer = (state = initialState, { type, payload }) => {
  switch (type) {
    case API_REQUEST:
      return { ...state, isLoading: payload };
    case API_SUCCESS:
      return { ...state, coffeeData: payload, isLoading: false };
    case API_FAILURE:
      return { ...state, isError: payload, isLoading: false };
    case API_TOTALPAGE:
      return { ...state, page: payload.page, totalPages: payload.totalPages };
    default:
      return state;
  }
};

export const store = legacy_createStore(coffeeReducer, applyMiddleware(thunk, logger));

function App() {
  const [currentPage, setCurrentPage] = useState(1);
  const { isLoading, coffeeData, isError, page, totalPages } = useSelector((state) => state);
  const dispatch = useDispatch();
  const per_page = 3;

  const getData = async () => {
    dispatch(setLoading(true));
    const {page} = store.getState()
    try {
      let res = await axios.get(`https://dbioz2ek0e.execute-api.ap-south-1.amazonaws.com/mockapi/get-coffee?_page=${page}`);
      dispatch(setCoffeeData(res.data.data));
      dispatch(setPages(page, res.data.totalPages)); 
      dispatch(setLoading(false));
    } catch (error) {
      dispatch(setError(true));
    }
  };

  useEffect(() => {
    dispatch(getData());
  }, [dispatch, page]);

  const indexOfLastPage = currentPage * per_page;
  const indexOfFirstPage = indexOfLastPage - per_page;
  const currentProduct = coffeeData.slice(indexOfFirstPage, indexOfLastPage);

  function handlePrev() {
    if (page > 1) {
      dispatch(setPages(page - 1, totalPages));
      setCurrentPage(currentPage - 1);
    }
  }

  function handleNext() {
    if (totalPages) {
      dispatch(setPages(page + 1, totalPages));
      setCurrentPage(currentPage + 1);
    }else if (totalPages === indexOfLastPage){
      setCurrentPage(disabled)
    }
  }

  return (
    <>
      <pre>
        {JSON.stringify(coffeeData)}
      </pre>
      <div>
        {currentProduct && currentProduct.map((coffee, ind) => {
          return <Coffeebeans {...coffee} key={coffee.id} />;
        })}

        <button onClick={handlePrev}>Prev</button>
        <p>{page}</p>
        <button onClick={handleNext} >Next</button>
      </div>
    </>
  );
}

export default App;
